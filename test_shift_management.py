#!/usr/bin/env python3
"""
Test script to verify the new shift management and daily sales report functionality.
"""
import sys
import os
from pathlib import Path

# Add the src directory to Python path
current_dir = Path(__file__).parent.absolute()
sys.path.insert(0, str(current_dir / "src"))

from controllers.shift_controller import ShiftController
from controllers.auth_controller import AuthController
from models.user import User, UserRole, Shift, ShiftStatus
from database.db_config import Session, get_fresh_session
from datetime import datetime, date
import logging

# Set up logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_shift_management():
    """Test the new shift management functionality."""
    
    print("üß™ Testing Shift Management and Daily Sales Report Functionality")
    print("=" * 60)
    
    # Get a fresh session
    session = get_fresh_session()
    
    try:
        # Test 1: Create a test user
        print("\n1. Creating test user...")
        test_user = session.query(User).filter_by(username='test_cashier').first()
        if not test_user:
            # Create a test cashier user
            import bcrypt
            
            password_hash = bcrypt.hashpw('password123'.encode('utf-8'), bcrypt.gensalt())
            test_user = User(
                username='test_cashier',
                password_hash=password_hash.decode('utf-8'),
                role=UserRole.CASHIER,
                full_name='Test Cashier',
                active=1
            )
            session.add(test_user)
            session.commit()
            print("  ‚úÖ Test user created")
        else:
            print("  ‚úÖ Test user already exists")
        
        # Test 2: Test shift controller
        print("\n2. Testing shift controller...")
        shift_controller = ShiftController()
        
        # Test 3: Open a shift
        print("\n3. Opening a shift...")
        opening_amount = 1000.0
        shift = shift_controller.open_shift(test_user, opening_amount)
        
        if shift:
            print(f"  ‚úÖ Shift opened successfully!")
            print(f"  - Shift ID: {shift.id}")
            print(f"  - Opening Amount: ${shift.opening_amount}")
            print(f"  - Status: {shift.status.value}")
            print(f"  - Open Time: {shift.open_time}")
        else:
            print("  ‚ùå Failed to open shift")
            return False
        
        # Test 4: Get current shift
        print("\n4. Getting current shift...")
        current_shift = shift_controller.get_current_shift(test_user)
        if current_shift:
            print(f"  ‚úÖ Current shift found!")
            print(f"  - Shift ID: {current_shift.id}")
            print(f"  - Status: {current_shift.status.value}")
        else:
            print("  ‚ùå No current shift found")
        
        # Test 5: Check if any shift is open
        print("\n5. Checking for any open shift...")
        any_open_shift = shift_controller.get_any_open_shift()
        if any_open_shift:
            print(f"  ‚úÖ Open shift found by {any_open_shift.user.username}")
        else:
            print("  ‚ùå No open shift found")
        
        # Test 6: Get daily sales report
        print("\n6. Getting daily sales report...")
        report_data = shift_controller.get_daily_sales_report()
        print(f"  ‚úÖ Daily sales report generated!")
        print(f"  - Date: {report_data.get('date', 'N/A')}")
        print(f"  - Total Sales: {report_data.get('total_sales', 0)}")
        print(f"  - Total Amount: ${report_data.get('total_amount', 0):.2f}")
        print(f"  - Average Sale: ${report_data.get('average_sale', 0):.2f}")
        print(f"  - Shifts: {len(report_data.get('shifts', []))}")
        
        # Test 7: Get shift summary
        print("\n7. Getting shift summary...")
        shift_summary = shift_controller.get_shift_summary(shift)
        print(f"  ‚úÖ Shift summary generated!")
        print(f"  - User: {shift_summary.get('user', 'Unknown')}")
        print(f"  - Opening Amount: ${shift_summary.get('opening_amount', 0):.2f}")
        print(f"  - Total Sales: {shift_summary.get('total_sales', 0)}")
        print(f"  - Total Amount: ${shift_summary.get('total_amount', 0):.2f}")
        
        # Test 8: Close the shift
        print("\n8. Closing the shift...")
        closed_shift = shift_controller.close_shift(test_user)
        
        if closed_shift:
            print(f"  ‚úÖ Shift closed successfully!")
            print(f"  - Status: {closed_shift.status.value}")
            print(f"  - Close Time: {closed_shift.close_time}")
        else:
            print("  ‚ùå Failed to close shift")
        
        # Test 9: Verify no open shifts
        print("\n9. Verifying no open shifts...")
        any_open_shift = shift_controller.get_any_open_shift()
        if not any_open_shift:
            print("  ‚úÖ No open shifts found (correct)")
        else:
            print(f"  ‚ùå Open shift still found by {any_open_shift.user.username}")
        
        # Test 10: Test daily reset functionality
        print("\n10. Testing daily reset functionality...")
        shift_controller.reset_daily_sales()
        print("  ‚úÖ Daily reset function called successfully")
        
        print("\nüéâ All tests completed successfully!")
        print("\n‚úÖ Shift management functionality is working correctly")
        print("‚úÖ Daily sales report functionality is working correctly")
        print("‚úÖ Shift opening and closing is working correctly")
        print("‚úÖ Only one shift can be open at a time")
        print("‚úÖ Shift summaries are generated correctly")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå Test failed with error: {e}")
        import traceback
        traceback.print_exc()
        return False
        
    finally:
        session.close()

if __name__ == "__main__":
    success = test_shift_management()
    if success:
        print("\n‚úÖ All tests passed!")
    else:
        print("\n‚ùå Some tests failed!")
        sys.exit(1) 